#!/usr/bin/env python3
import argparse
import random

from difflib import SequenceMatcher


import lib.parser




def chop_reference(reference_genome, read_length, structure):
    genome_length = len(reference_genome)
    number_of_reads = (genome_length // read_length) * 1000
    print(number_of_reads)
    chunked_genome = []
    for index in range(number_of_reads):
        random_start = random.randint(0, genome_length)
        chunk = reference_genome[random_start:random_start+read_length]
        if len(chunk) < read_length:
            if structure == 'circular':
                from_start = read_length - len(chunk)
                chunk = chunk + reference_genome[:from_start]
                chunked_genome.append(chunk)
        else:
            chunked_genome.append(chunk)
    return chunked_genome



def main(args):
    fasta_file = lib.parser.FASTAFile(args.fasta_file)

    raw_sequences = [record for record in fasta_file.iterate]

    reference_genome = raw_sequences[0]
    chopped_genome = chop_reference(reference_genome.sequence,
                                    int(args.read_length),
                                    args.structure)
    
    print(len(chopped_genome))
    chopped_genome = list(set(chopped_genome))
    print(len(chopped_genome))

    with open(args.output_file, 'w') as outfile:
        for num, read in enumerate(chopped_genome):
            sam_read_id_line = '@{genome}.{number}\n'.format(genome=reference_genome.info_line,
                                                           number=num)
            sequence = '{read}\n'.format(read=read)
            seperator = '+\n'
            quality_line = '{read}\n'.format(read=read)
            outfile.write(sam_read_id_line)
            outfile.write(sequence)
            outfile.write(seperator)
            outfile.write(quality_line)

    

def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('fasta_file')
    parser.add_argument('read_length')
    parser.add_argument('output_file')
    parser.add_argument('structure')
    args = parser.parse_args()
    return args



if __name__ == '__main__':
    args = get_arguments()
    main(args)
